local ConfigManager = {}

local HttpService = game:GetService("HttpService")

local RegisteredConfigs = {}
local Toggled = true

function Color3ToTable(Color)
	return {R = Color.R, G = Color.G, B = Color.B}
end

function TableToColor3(Table)
	return Color3.new(Table.R, Table.G, Table.B)
end

function SerializeTable(Table)
	local Data = {}
	for K, V in pairs(Table) do
		if typeof(V) == "Color3" then
			Data[K] = Color3ToTable(V)
		else
			Data[K] = V
		end
	end
	return Data
end

function DeserializeTable(ConfigData, Table)
	for K, V in pairs(Table) do
		if type(Table[K]) == "userdata" and Table[K].R then
			Table[K] = Color3.fromRGB(V.R * 255, V.G * 255, V.B * 255)
		else
			Table[K] = V
		end
	end
end

function Register(ConfigName, ConfigTable, ConfigPath)
	local path = ConfigPath or (ConfigName .. ".json")
	RegisteredConfigs[ConfigName] = {
		Name = ConfigName,
		Table = ConfigTable,
		Path = ConfigPath
	}
	return true
end

function Unregister(ConfigName)
	if RegisteredConfigs[ConfigName] then
		RegisteredConfigs[ConfigName] = nil
		return true
	end
	return false
end

function SaveConfig(ConfigName)
	if not Toggled then return end
	local Config = RegisteredConfigs[ConfigName]
	if not Config then warn("ConfigManager - No config registered with name '" .. tostring(ConfigName) .. "'") return false end
	local Success, Result = pcall(function()
		local Data = SerializeTable(Config.Table)
		local JsonData = HttpService:JSONEncode(Data)
		writefile(Config.Path, JsonData)
	end)
	if not Success then warn("ConfigManager - " .. Config.Name .. " save failed: " .. tostring(Result)) return false end
	return true
end

function LoadConfig(ConfigName)
	local Config = RegisteredConfigs[ConfigName]
	if not Config then warn("ConfigManager - No config registered with name '" .. tostring(ConfigName) .. "'") return false end
	if not isfile(Config.Path) then warn("ConfigManager - No " .. Config.Name .. " file found at " .. Config.Path) return false end
	local Success, Result = pcall(function()
		local JsonData = readfile(Config.Path)
		local Data = HttpService:JSONDecode(JsonData)
		DeserializeTable(Data, Config.Table)
	end)
	if not Success then warn("ConfigManager - " .. Config.Name .. " load failed: " .. tostring(Result)) return false end
	return true
end

function SaveAll()
	local results = {}
	for Name, _ in pairs(RegisteredConfigs) do
		results[Name] = SaveConfig(Name)
	end
	return results
end

function LoadAllConfigs()
	local results = {}
	for Name, _ in pairs(RegisteredConfigs) do
		results[Name] = LoadConfig(Name)
	end
	return results
end

function GetRegisteredConfigs()
	local names = {}
	for Name, _ in pairs(RegisteredConfigs) do
		table.insert(names, Name)
	end
	return names
end

function IsConfigRegistered(ConfigName)
	return RegisteredConfigs[ConfigName] ~= nil
end

function Toggle(Bool)
	Toggled = Bool
end

function GetConfigInfo(ConfigName)
	local Config = RegisteredConfigs[ConfigName]
	if not Config then return nil end
	return {
		Name = Config.Name,
		Path = Config.Path,
		Table = Config.Table
		
	}
end

ConfigManager.Register = Register
ConfigManager.Unregister = Unregister
ConfigManager.SaveConfig = SaveConfig
ConfigManager.LoadConfig = LoadConfig
ConfigManager.SaveAll = SaveAll
ConfigManager.LoadAllConfigs = LoadAllConfigs
ConfigManager.GetRegisteredConfigs = GetRegisteredConfigs
ConfigManager.IsConfigRegistered = IsConfigRegistered
ConfigManager.GetConfigInfo = GetConfigInfo
ConfigManager.Toggle = Toggle

return ConfigManager
